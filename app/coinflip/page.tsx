'use client';
import React, { useState, useCallback } from 'react';
import Image from "next/image";
import Header from './header';
import { Randomness } from 'randomness-js'
import { BrowserProvider } from 'ethers'
import { useWalletClient } from 'wagmi'
import { getBytes } from "ethers"

export default function CoinFlip() {
    const [isFlipping, setIsFlipping] = useState(false);
    const [result, setResult] = useState(0);
    const [flipCount, setFlipCount] = useState(0);
    const [stats, setStats] = useState({ heads: 0, tails: 0 });
    const [loading, setLoading] = useState(false);
    const { data: walletClient } = useWalletClient()

    const getSigner = async () => {
        if (!walletClient) return null

        // Create an ethers v6 provider from the walletClient
        const provider = new BrowserProvider(walletClient.transport)

        // Get the signer
        return await provider.getSigner()
    }


    const generateRandomNumber = async () => {
        try {
            const signer = await getSigner()
            console.log(signer)
            if (!signer) return

            const randomness = Randomness.createBaseSepolia(signer)
            console.log(randomness)
            const response = await randomness.requestRandomness()
            console.log("hello", response)
            const bytes = getBytes(response.randomness)
            console.log(bytes)
            if (bytes.length === 0) {
                console.log("hmm the randomness was empty for some reason...")
            } else {
                console.log(bytes[0])
                setResult(bytes[0] % 2 === 0 ? 1 : 2)
            }
        } catch (error) {
            console.error("Error getting signer:", error)
        }
    }

    return (
        <>
            <Header />
            <div className="min-h-screen bg-black-pattern flex flex-col relative">
                <main className="flex-grow mt-8">
                    <div className="container mx-auto px-4 py-12">
                        <div className="flex flex-col lg:flex-row items-center lg:gap-64">
                            {/* Left Side - Text Content */}
                            <div className="w-full lg:w-1/2 space-y-8 text-wrap mt-24">
                                <h1 className="font-funnel-display text-3xl md:text-4xl font-bold text-white">
                                    Heads or Tails? What's you call?
                                </h1>
                                <p className="font-funnel-display text-lg text-gray-500 font-funnel">
                                    Each coin flip uses a verifiable random number generated by a secure network of trusted nodes.
                                    Itâ€™s cryptographically safe, tamperproof, and aligned with blockchain standards, so the result is always fair and provable.
                                </p>

                                <div>
                                    <button
                                        onClick={generateRandomNumber}
                                        className="font-funnel-display flex flex-row gap-2 text-red-500 text-2xl font-medium py-3 transition duration-300 transform hover:scale-105">
                                        <Image
                                            src="/assets/images/redarrow.svg"
                                            alt="Description"
                                            width={30}
                                            height={30}
                                            className=""
                                        />
                                        Spin The Coin
                                    </button>
                                </div>
                            </div>

                            {/* Right Side - Graphic Area */}
                            <div className="w-full lg:w-1/2 justify-center items-center">
                                <div className="w-full aspect-square max-w-md flex items-center justify-center">
                                    {result == 0 &&
                                        <Image
                                            src="/assets/images/question.png"
                                            alt="Description"
                                            width={400}
                                            height={400}
                                            className="animate-pulse"
                                        />
                                    }
                                    {result == 1 &&
                                        <Image
                                            src="/assets/images/heads.png"
                                            alt="Description"
                                            width={400}
                                            height={400}
                                            className=""
                                        />
                                    }
                                    {result == 2 &&
                                        <Image
                                            src="/assets/images/tails.png"
                                            alt="Description"
                                            width={400}
                                            height={400}
                                            className=""
                                        />
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </main>
            </div>
        </>

    );
}